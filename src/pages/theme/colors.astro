---
import * as ThemePage from './_ThemePage/_index.astro';
import * as ThemeSection from './_ThemeSection/_index.astro';
import App from '../../lib/app';
import UI from '../../lib/ui';
import theme from '../../theme';

const colorScales = Object.entries(theme.colors).filter(([_, value]) => typeof value === 'object');
const singleColors = Object.entries(theme.colors).filter(([_, value]) => typeof value === 'string');

const sections = [
  { id: 'color-scales', label: 'Color Scales' },
  { id: 'base-colors', label: 'Base Colors' },
  { id: 'gradients', label: 'Gradients' },
];
---

<App.Page>
  <App.PageHeader />
  <App.PageBody class="bg-gray-50">
    <App.PageSection>
      <UI.Layout.Box class="max-w-[90rem] mx-auto py-16 px-6">
        <ThemePage.Header>
          <ThemePage.BackLink />
          <ThemePage.Title>Colors</ThemePage.Title>
          <ThemePage.Description>
            Our color system is designed to be accessible, consistent, and flexible. It includes a
            range of scales for primary and neutral colors, along with single-value colors and
            gradients.
          </ThemePage.Description>
        </ThemePage.Header>

        <ThemePage.Nav>
          <ThemePage.NavTitle slot="title">Colors</ThemePage.NavTitle>
          {sections.map(({ id, label }) => <ThemePage.NavItem href={`#${id}`} label={label} />)}
        </ThemePage.Nav>

        <UI.Layout.Box class="space-y-24">
          <ThemeSection.Section id="color-scales">
            <ThemeSection.Header>
              <ThemeSection.HeaderTitle slot="title">Color Scales</ThemeSection.HeaderTitle>
              <ThemeSection.HeaderBody slot="body">
                Color scales provide a range of shades for each primary color, allowing for
                consistent and accessible color usage across the application.
              </ThemeSection.HeaderBody>
            </ThemeSection.Header>
            <ThemeSection.Body class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-16">
              {
                colorScales.map(([name, scale]) => (
                  <UI.Layout.Box class="space-y-6">
                    <UI.Typography.Heading.H4 class="text-2xl font-medium capitalize">
                      {name}
                    </UI.Typography.Heading.H4>
                    <UI.Layout.Box class="grid grid-cols-10 gap-3">
                      {Object.entries(scale).map(([shade, color]) => (
                        <UI.Layout.Box class="space-y-3">
                          <UI.Layout.Box
                            class="h-20 rounded-md shadow-sm"
                            style={`background-color: ${color}`}
                          />
                          <UI.Layout.Box class="text-sm text-center font-medium">
                            {shade}
                          </UI.Layout.Box>
                        </UI.Layout.Box>
                      ))}
                    </UI.Layout.Box>
                  </UI.Layout.Box>
                ))
              }
            </ThemeSection.Body>
          </ThemeSection.Section>

          <ThemeSection.Section id="base-colors">
            <ThemeSection.Header>
              <ThemeSection.HeaderTitle slot="title">Base Colors</ThemeSection.HeaderTitle>
              <ThemeSection.HeaderBody slot="body">
                Single-value colors are used for specific purposes where a consistent, non-scaled
                color is needed.
              </ThemeSection.HeaderBody>
            </ThemeSection.Header>
            <ThemeSection.Body class="grid grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-12">
              {
                singleColors.map(([name, color]) => (
                  <UI.Layout.Box class="space-y-4">
                    <UI.Layout.Box
                      class="h-32 rounded-lg shadow-md"
                      style={`background-color: ${color}`}
                    />
                    <UI.Layout.Box class="text-base font-medium capitalize">{name}</UI.Layout.Box>
                  </UI.Layout.Box>
                ))
              }
            </ThemeSection.Body>
          </ThemeSection.Section>

          <ThemeSection.Section id="gradients">
            <ThemeSection.Header>
              <ThemeSection.HeaderTitle slot="title">Gradients</ThemeSection.HeaderTitle>
              <ThemeSection.HeaderBody slot="body">
                Gradients add depth and visual interest to the interface, perfect for backgrounds
                and decorative elements.
              </ThemeSection.HeaderBody>
            </ThemeSection.Header>
            <ThemeSection.Body class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-16">
              {
                Object.entries(theme.gradients).map(([name, gradient]) => (
                  <UI.Layout.Box class="space-y-6">
                    <UI.Typography.Heading.H4 class="text-2xl font-medium capitalize">
                      {name}
                    </UI.Typography.Heading.H4>
                    <UI.Layout.Box
                      class="h-40 rounded-lg shadow-md"
                      style={`background: linear-gradient(to right, ${gradient.start}, ${gradient.end})`}
                    />
                    <UI.Layout.Box class="grid grid-cols-2 gap-6">
                      {Object.entries(gradient).map(([position, color]) => (
                        <UI.Layout.Box class="text-sm">
                          <UI.Layout.Box class="font-medium capitalize">{position}</UI.Layout.Box>
                          <UI.Layout.Box class="text-gray-500 mt-1">{color}</UI.Layout.Box>
                        </UI.Layout.Box>
                      ))}
                    </UI.Layout.Box>
                  </UI.Layout.Box>
                ))
              }
            </ThemeSection.Body>
          </ThemeSection.Section>
        </UI.Layout.Box>
      </UI.Layout.Box>
    </App.PageSection>
  </App.PageBody>
</App.Page>
